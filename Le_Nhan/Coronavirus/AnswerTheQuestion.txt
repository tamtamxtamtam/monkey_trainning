1.Những tích chất của hướng đối tượng ( đa hình, đóng gói…) ở bài tập trên của các em thể hiện ở chỗ nào ?
- Tính đóng gói: +tính đóng gói là sự kết hợp giữa các biến và các hàm trong một class.
		+ Trong bài code được thể hiện ở các class:
			i)Trong class Patient: Hàm setResistance() gán giá trị cho biến m_resistance; Hàm getState() trả về getState...
			ii) Trong class Coronavirus: Hàm getVirusResistance() trả về giá trị của biến m_resistance; Hàm reduceResistance() gán và trả về giá trị của biến m_resistance..
			iii) Trong class AlphaCoronavirus: Hàm initResistance() sinh giá trị ngấu nhiên cho biến m_resistance; Hàm doBorn() sinh giá trị ngẫu nhiên cho biến m_color...
			iiii) Trong class BetaCoronavirus: Hàm initResistance() sử dụng giá trị m_protein để so sánh và gán giá trị cho biến m_resistance; Hàm doBorn() sinh giá trị ngẫu nhiên cho Protein.
- Tính đa hình: + Đa hình có nghĩa là nhiều hình dạng. Tính đa hình có nghĩa là lớp cha và các lớp con kế thừa lớp cha có thể sử dụng chung một phương thức mà không cần khai báo lại.
		+ Trong bài code được thể hiện:
			i) Các class BetaCoronavirus, AlphaCoronavirus kế thừa lớp Coronavirus, chúng sử dụng chung các hàm như: doBorn(), doClone(), doDie(), initResistance().
- Tính kế thừa: + Các lớp con có thể sử dụng các thuộc tính và phương thức từ lớp cha.
		+ Trong bài code được thể hiện ở các class:
			i) Class AlphaCoronavirus kế thừa lớp Coronavirus
			ii) Class BetaCoronavirus kế thừa lớp Coronavirus

//
2. Phân biệt khác nhau std::list/std::vector nằm ở class Patient
- List là dạng danh sách liên kết.
- Vector là dạng được cấp phát động.
- Chèn và xóa: Chèn và xóa trong list hiệu quả hơn rất nhiều so với vector. Chèn và xóa trong list thì chỉ cần một vài còn trỏ thay đổi. Còn trong vector thì làm cho tất cả các phần tử thay đổi.
- Truy cập ngẫu nhiên: Việc truy cập ngẫu nhiên trong vector dễ hơn nhiều so với list. Trong list để truy cập phần tử thứ n thì phải truy cập phần tử thứ n-1 trước, để truy cập phần tử thứ n-1 thì cần phải truy cập phần tử thứ n-2. Trong khi đó vector chỉ cần khai báo tên vector và chỉ số phần tử cần truy cập.
- Vô hiệu hóa vòng lặp: Xóa hoặc trèn trong list không làm mất hiệu lực của vòng lặp vì không có phần tử nào di chuyển khỏi vị trí của nó, chỉ có một vài con trỏ thay đổi. Trong khi đó trèn xóa trong vector có thể làm mất hiệu lực vòng lặp.

3. Tại sao khi tạo nhiều file , mã mỗi file header ta cần phải định nghĩa.
-  #pragma once là một chỉ thị tiền sử lý, nó được thiết kế khiến tệp nguồn hiện tại chỉ được đưa vào một lần troang trình biên dịch. #pragma once giúp cho chương trình ít mã hơn, tránh xung đột tên và tăng tốc độ biên dịch.
- #define là sử dụng để thay thế cho #pragma once, để tránh phải khai báo #include<> các thư viện nhiều lần.

